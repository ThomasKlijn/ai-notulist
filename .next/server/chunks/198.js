"use strict";exports.id=198,exports.ids=[198],exports.modules={88198:(a,b,c)=>{c.d(b,{AudioStorageService:()=>n});var d=c(29021),e=c(33873),f=c(28354);let g=(0,f.promisify)(d.writeFile),h=(0,f.promisify)(d.readFile),i=(0,f.promisify)(d.unlink),j=(0,f.promisify)(d.mkdir),k=(0,f.promisify)(d.readdir);class l{constructor(){this.chunks=new Map,this.tempDir=e.join("/tmp","audio-chunks"),this.ensureTempDirectory()}async ensureTempDirectory(){try{await j(this.tempDir,{recursive:!0})}catch(a){}}getChunkKey(a,b){return`${a}-chunk-${b}`}getChunkFilePath(a,b){return e.join(this.tempDir,`${a}-chunk-${b}.webm`)}async uploadAudioChunk(a,b,c){try{console.log(`Storing audio chunk ${b} for meeting ${a}, size: ${c.length} bytes`),await this.ensureTempDirectory();let d=this.getChunkKey(a,b),e=this.getChunkFilePath(a,b);await g(e,c);let f={meetingId:a,chunkIndex:b,filePath:e,timestamp:new Date};return this.chunks.set(d,f),console.log(`Successfully stored chunk ${b} to file: ${e}`),d}catch(a){throw console.error(`Error storing audio chunk ${b}:`,a),Error(`Failed to store audio chunk: ${a?.message||a}`)}}async downloadAudioChunk(a){console.log(`üì• Downloading audio chunk: ${a}`);let b=a.split("-chunk-");if(2!==b.length)throw Error(`Invalid chunk key format: ${a}`);let c=b[0],e=parseInt(b[1]),f=this.getChunkFilePath(c,e);console.log(`üîç Looking for file: ${f}`);try{if(d.existsSync(f)){console.log(`‚úÖ Found and reading chunk file: ${f}`);let a=await h(f);return console.log(`‚úÖ Successfully read chunk ${e}, size: ${a.length} bytes`),a}console.error(`‚ùå Audio chunk file not found at: ${f}`);try{let a=(await k(this.tempDir)).filter(a=>a.includes(c));console.log(`üîç Available files for meeting ${c}:`,a)}catch(a){console.error(`‚ùå Could not read temp directory ${this.tempDir}`)}throw Error(`Audio chunk file not found: ${f}`)}catch(b){throw console.error(`‚ùå Failed to read audio chunk ${a}:`,b),Error(`Failed to read audio chunk: ${b?.message||b}`)}}async getAllAudioChunksForMeeting(a){console.log(`Getting all audio chunks for meeting: ${a}`);let b=[];try{let c=(await k(this.tempDir)).filter(b=>b.startsWith(`${a}-chunk-`)&&b.endsWith(".webm")).map(b=>{let c=b.match(RegExp(`^${a}-chunk-(\\d+)\\.webm$`));return c?{file:b,chunkIndex:parseInt(c[1]),filePath:e.join(this.tempDir,b)}:null}).filter(Boolean).sort((a,b)=>a.chunkIndex-b.chunkIndex);for(let e of(console.log(`Found ${c.length} chunk files for meeting ${a}`),c))if(e&&d.existsSync(e.filePath))try{let a=await h(e.filePath);b.push(a),console.log(`‚úÖ Read chunk ${e.chunkIndex}: ${a.length} bytes`)}catch(a){console.error(`Error reading chunk file ${e.filePath}:`,a)}}catch(a){console.error(`Error reading temp directory ${this.tempDir}:`,a)}return console.log(`Total chunks loaded: ${b.length}`),b}async combineAudioChunks(a){let b=await this.getAllAudioChunksForMeeting(a);return Buffer.concat(b)}async getFirstAudioChunk(a){let b=this.getChunkKey(a,0);console.log(`Looking for first audio chunk: ${b}`);try{let a=await this.downloadAudioChunk(b);return console.log(`Successfully found first audio chunk, size: ${a.length} bytes`),a}catch(b){return console.log(`First audio chunk not found for meeting ${a}:`,b),null}}async cleanupMeetingChunks(a){let b=[],c=[];for(let[d,e]of this.chunks.entries())e.meetingId===a&&(b.push(d),c.push(e.filePath));for(let a of c)try{d.existsSync(a)&&await i(a)}catch(b){console.error(`Error deleting file ${a}:`,b)}b.forEach(a=>this.chunks.delete(a)),console.log(`Cleaned up ${b.length} chunks for meeting ${a}`)}getStorageStats(){let a=0,b=0;for(let c of this.chunks.values())try{if(d.existsSync(c.filePath)){let e=d.statSync(c.filePath);a+=e.size,b++}}catch(a){}return{totalChunks:b,totalFileSizeMB:Math.round(a/1048576*100)/100}}}let m=new l;class n{async uploadAudioChunk(a,b,c){return m.uploadAudioChunk(a,b,c)}async downloadAudioChunk(a){return m.downloadAudioChunk(a)}async getAllAudioChunksForMeeting(a){return m.getAllAudioChunksForMeeting(a)}async combineAudioChunks(a){return m.combineAudioChunks(a)}async getFirstAudioChunk(a){return m.getFirstAudioChunk(a)}async deleteAudioChunk(a){let b=a.split("-chunk-");if(2!==b.length)return void console.warn(`Invalid chunk key format for deletion: ${a}`);let c=b[0],f=parseInt(b[1]),g=e.join("/tmp","audio-chunks",`${c}-chunk-${f}.webm`);try{d.existsSync(g)?(await i(g),console.log(`‚úÖ Deleted audio chunk file: ${g}`)):console.log(`‚ö†Ô∏è Audio chunk file not found (already deleted?): ${g}`)}catch(b){console.error(`‚ùå Error deleting audio chunk ${a}:`,b)}}}}};