exports.id=287,exports.ids=[287],exports.modules={890:(a,b,c)=>{"use strict";c.d(b,{Ht:()=>i,ME:()=>j,jw:()=>h}),c(80876);var d=c(31267),e=c(53760),f=c(48689);function g(a){try{let b=Buffer.from(a,"base64url").toString();return JSON.parse(b)}catch{return null}}async function h(a){let b=Array.from(crypto.getRandomValues(new Uint8Array(16))).map(a=>a.toString(16).padStart(2,"0")).join(""),c=new Date(Date.now()+864e5);await d.db.insert(e.sessions).values({sid:b,sess:{userId:a},expire:c});let f=JSON.stringify({sessionId:b,userId:a,expiresAt:c.toISOString()});return Buffer.from(f).toString("base64url")}async function i(a){if(!a)return null;let b=g(a);if(!b||!b.sessionId)return null;let[c]=await d.db.select().from(e.sessions).where((0,f.eq)(e.sessions.sid,b.sessionId));return!c||c.expire<new Date?(c&&await d.db.delete(e.sessions).where((0,f.eq)(e.sessions.sid,b.sessionId)),null):{userId:c.sess.userId}}async function j(a){let b=g(a);b?.sessionId&&await d.db.delete(e.sessions).where((0,f.eq)(e.sessions.sid,b.sessionId))}process.env.SESSION_SECRET},31267:(a,b,c)=>{"use strict";let d,e;c.d(b,{db:()=>j});var f=c(9608),g=c(22245),h=c(53760);if("undefined"==typeof WebSocket)try{let a=c(45361);f.Vz.webSocketConstructor=a}catch(a){console.log("WebSocket not available in this environment, using HTTP pooling")}else f.Vz.webSocketConstructor=WebSocket;function i(){if(!d){if(!process.env.DATABASE_URL)throw Error("DATABASE_URL must be set. Did you forget to provision a database?");e=new f.bC({connectionString:process.env.DATABASE_URL}),d=(0,g.fd)(e,{schema:h})}return d}new Proxy({},{get:(a,b)=>(!e&&i(),e)[b]});let j=new Proxy({},{get:(a,b)=>i()[b]})},39727:()=>{},47990:()=>{},53760:(a,b,c)=>{"use strict";c.r(b),c.d(b,{attendees:()=>p,attendeesRelations:()=>t,audioChunks:()=>q,audioChunksRelations:()=>u,insertAttendeeSchema:()=>B,insertAudioChunkSchema:()=>C,insertMeetingSchema:()=>A,insertSpeakerSchema:()=>D,meetings:()=>o,meetingsRelations:()=>s,meetingsRelationsExtended:()=>z,sessions:()=>w,speakers:()=>r,speakersRelations:()=>v,users:()=>x,usersRelations:()=>y});var d=c(28803),e=c(57789),f=c(62352),g=c(29745),h=c(94728),i=c(84266),j=c(4396),k=c(98510),l=c(65828),m=c(58600),n=c(59791);let o=(0,d.cJ)("meetings",{id:(0,e.yf)("id").primaryKey(),title:(0,e.yf)("title",{length:255}).notNull(),language:(0,e.yf)("language",{length:10}).default("nl"),status:(0,e.yf)("status",{length:20}).notNull().default("recording"),createdAt:(0,f.vE)("created_at").defaultNow().notNull(),finishedAt:(0,f.vE)("finished_at"),transcription:(0,g.Qq)("transcription"),summary:(0,h.Fx)("summary"),speakerData:(0,h.Fx)("speaker_data"),retentionDays:(0,i.nd)("retention_days").default(30).notNull(),autoCleanupEnabled:(0,j.zM)("auto_cleanup_enabled").default(!0).notNull(),lastCleanupAt:(0,f.vE)("last_cleanup_at"),userId:(0,e.yf)("user_id").notNull(),organizerConsentGiven:(0,j.zM)("organizer_consent_given").notNull().default(!1),organizerConsentTimestamp:(0,f.vE)("organizer_consent_timestamp"),allAttendeesConsented:(0,j.zM)("all_attendees_consented").default(!1).notNull()}),p=(0,d.cJ)("attendees",{id:(0,k.vX)("id").primaryKey(),meetingId:(0,e.yf)("meeting_id").notNull().references(()=>o.id,{onDelete:"cascade"}),name:(0,e.yf)("name",{length:255}),email:(0,e.yf)("email",{length:255}).notNull(),role:(0,e.yf)("role",{length:100}),consentGiven:(0,j.zM)("consent_given").default(!1).notNull(),consentTimestamp:(0,f.vE)("consent_timestamp"),consentPolicyVersion:(0,e.yf)("consent_policy_version",{length:20}).default("v1.0"),consentWithdrawn:(0,j.zM)("consent_withdrawn").default(!1).notNull(),withdrawalTimestamp:(0,f.vE)("withdrawal_timestamp"),consentToken:(0,e.yf)("consent_token",{length:64})}),q=(0,d.cJ)("audio_chunks",{id:(0,k.vX)("id").primaryKey(),meetingId:(0,e.yf)("meeting_id").notNull().references(()=>o.id,{onDelete:"cascade"}),chunkIndex:(0,i.nd)("chunk_index").notNull(),filename:(0,e.yf)("filename",{length:255}).notNull(),objectPath:(0,e.yf)("object_path",{length:500}),sizeBytes:(0,i.nd)("size_bytes"),uploadedAt:(0,f.vE)("uploaded_at").defaultNow().notNull()}),r=(0,d.cJ)("speakers",{id:(0,k.vX)("id").primaryKey(),meetingId:(0,e.yf)("meeting_id").notNull().references(()=>o.id,{onDelete:"cascade"}),speakerId:(0,e.yf)("speaker_id",{length:50}).notNull(),speakerName:(0,e.yf)("speaker_name",{length:255}),duration:(0,i.nd)("duration").notNull(),percentage:(0,i.nd)("percentage").notNull(),createdAt:(0,f.vE)("created_at").defaultNow().notNull()}),s=(0,n.K1)(o,({many:a})=>({attendees:a(p),audioChunks:a(q),speakers:a(r)})),t=(0,n.K1)(p,({one:a})=>({meeting:a(o,{fields:[p.meetingId],references:[o.id]})})),u=(0,n.K1)(q,({one:a})=>({meeting:a(o,{fields:[q.meetingId],references:[o.id]})})),v=(0,n.K1)(r,({one:a})=>({meeting:a(o,{fields:[r.meetingId],references:[o.id]})})),w=(0,d.cJ)("sessions",{sid:(0,e.yf)("sid").primaryKey(),sess:(0,h.Fx)("sess").notNull(),expire:(0,f.vE)("expire").notNull()},a=>({expireIdx:(0,l.Pe)("IDX_session_expire").on(a.expire)})),x=(0,d.cJ)("users",{id:(0,e.yf)("id").primaryKey(),email:(0,e.yf)("email").unique(),firstName:(0,e.yf)("first_name"),lastName:(0,e.yf)("last_name"),profileImageUrl:(0,e.yf)("profile_image_url"),createdAt:(0,f.vE)("created_at").defaultNow().notNull(),updatedAt:(0,f.vE)("updated_at").defaultNow().notNull()}),y=(0,n.K1)(x,({many:a})=>({meetings:a(o)})),z=(0,n.K1)(o,({many:a,one:b})=>({attendees:a(p),audioChunks:a(q),speakers:a(r),user:b(x,{fields:[o.userId],references:[x.id]})})),A=(0,m.r)(o).omit({createdAt:!0,finishedAt:!0,transcription:!0,summary:!0,speakerData:!0,lastCleanupAt:!0,userId:!0,organizerConsentTimestamp:!0,allAttendeesConsented:!0}),B=(0,m.r)(p).omit({id:!0,meetingId:!0,consentGiven:!0,consentTimestamp:!0,consentPolicyVersion:!0,consentWithdrawn:!0,withdrawalTimestamp:!0,consentToken:!0}),C=(0,m.r)(q).omit({id:!0,uploadedAt:!0}),D=(0,m.r)(r).omit({id:!0,meetingId:!0,createdAt:!0})},78335:()=>{},80876:(a,b,c)=>{"use strict";c.d(b,{storage:()=>h});var d=c(31267),e=c(53760),f=c(48689);class g{async createMeeting(a,b,c){return await d.db.transaction(async d=>{let[f]=await d.insert(e.meetings).values({...a,userId:c}).returning();return b.length>0&&await d.insert(e.attendees).values(b.map(a=>({...a,meetingId:f.id,consentToken:crypto.randomUUID()}))),f})}async getMeeting(a){let[b]=await d.db.select().from(e.meetings).where((0,f.eq)(e.meetings.id,a));return b||void 0}async getMeetingWithAttendees(a){let b=await this.getMeeting(a);if(!b)return;let c=await d.db.select().from(e.attendees).where((0,f.eq)(e.attendees.meetingId,a)),g=await d.db.select().from(e.speakers).where((0,f.eq)(e.speakers.meetingId,a)).orderBy(e.speakers.percentage);return{...b,attendees:c,speakers:g}}async updateMeeting(a,b){await d.db.update(e.meetings).set(b).where((0,f.eq)(e.meetings.id,a))}async finishMeeting(a){await this.updateMeeting(a,{status:"processing",finishedAt:new Date})}async addAudioChunk(a){let[b]=await d.db.insert(e.audioChunks).values(a).returning();return b}async getAudioChunks(a){return await d.db.select().from(e.audioChunks).where((0,f.eq)(e.audioChunks.meetingId,a)).orderBy(e.audioChunks.chunkIndex)}async incrementChunkCount(a){}async addSpeakers(a,b){return 0===b.length?[]:await d.db.insert(e.speakers).values(b.map(b=>({...b,meetingId:a}))).returning()}async getSpeakers(a){return await d.db.select().from(e.speakers).where((0,f.eq)(e.speakers.meetingId,a)).orderBy(e.speakers.percentage)}async updateSpeakerName(a,b,c){await d.db.update(e.speakers).set({speakerName:c}).where((0,f.Uo)((0,f.eq)(e.speakers.meetingId,a),(0,f.eq)(e.speakers.speakerId,b)))}async getMeetingsForCleanup(a){return await d.db.select().from(e.meetings).where((0,f.Uo)((0,f.eq)(e.meetings.autoCleanupEnabled,!0),(0,f.eq)(e.meetings.status,"completed"))).orderBy(e.meetings.createdAt)}async cleanupMeeting(a){await d.db.delete(e.meetings).where((0,f.eq)(e.meetings.id,a))}async updateLastCleanup(a){await d.db.update(e.meetings).set({lastCleanupAt:new Date}).where((0,f.eq)(e.meetings.id,a))}async getUser(a){let[b]=await d.db.select().from(e.users).where((0,f.eq)(e.users.id,a));return b||void 0}async upsertUser(a){let[b]=await d.db.insert(e.users).values(a).onConflictDoUpdate({target:e.users.id,set:{email:a.email,firstName:a.firstName,lastName:a.lastName,profileImageUrl:a.profileImageUrl,updatedAt:new Date}}).returning();return b}async getAttendeeByConsentToken(a){let[b]=await d.db.select().from(e.attendees).where((0,f.eq)(e.attendees.consentToken,a));return b||null}async updateAttendeeConsent(a,b){let g=new Date;return await d.db.transaction(async d=>{let[h]=await d.update(e.attendees).set({consentGiven:b,consentTimestamp:b?g:e.attendees.consentTimestamp,consentWithdrawn:!b,withdrawalTimestamp:b?null:g}).where((0,f.eq)(e.attendees.consentToken,a)).returning({meetingId:e.attendees.meetingId});if(!h)return null;if(!b){await this.handleConsentWithdrawal(h.meetingId,d);try{let{processingService:a}=await c.e(348).then(c.bind(c,39348));await a.forceCleanupMeetingChunks(h.meetingId)}catch(a){console.error("Failed to cleanup temp files after consent withdrawal:",a)}}return h})}async handleConsentWithdrawal(a,b){let g=b||d.db,h=await g.select().from(e.audioChunks).where((0,f.eq)(e.audioChunks.meetingId,a));try{let{AudioStorageService:a}=await c.e(198).then(c.bind(c,88198)),b=new a;for(let a of h)a.objectPath&&await b.deleteAudioChunk(a.objectPath)}catch(a){console.error("Failed to delete audio binaries from storage:",a)}await g.delete(e.audioChunks).where((0,f.eq)(e.audioChunks.meetingId,a)),await g.update(e.meetings).set({transcription:null,summary:null,speakerData:null,status:"cancelled"}).where((0,f.eq)(e.meetings.id,a)),await g.delete(e.speakers).where((0,f.eq)(e.speakers.meetingId,a)),console.log(`GDPR: Complete data deletion (DB + binaries) for meeting ${a} due to consent withdrawal`)}async updateMeetingConsentStatus(a){let b=await d.db.select().from(e.attendees).where((0,f.eq)(e.attendees.meetingId,a)),c=b.length>0&&b.every(a=>a.consentGiven&&!a.consentWithdrawn);await d.db.update(e.meetings).set({allAttendeesConsented:c}).where((0,f.eq)(e.meetings.id,a))}}let h=new g},96487:()=>{}};